var window = global;
window.location = {
    href: "https://www.toutiao.com/c/user/token/MS4wLjABAAAAigrrKo-3rjLpxaH4Go3BrZRqHTIhLW3e30QjfFXgzNQ/",
    protocol: "https:"
};
window.navigator = {userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_2_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36"};
window.document = {referrer: "https://www.toutiao.com/"};
var glb;
(glb = "undefined" == typeof window ? global : window)._$jsvmprt = function(b, a, f) {
    function e() {
        if ("undefined" == typeof Reflect || !Reflect.construct)
            return !1;
        if (Reflect.construct.sham)
            return !1;
        if ("function" == typeof Proxy)
            return !0;
        try {
            return Date.prototype.toString.call(Reflect.construct(Date, [], (function() {}
            ))),
            !0
        } catch (b) {
            return !1
        }
    }
    function d(b, a, f) {
        return (d = e() ? Reflect.construct : function(b, a, f) {
            var e = [null];
            e.push.apply(e, a);
            var d = new (Function.bind.apply(b, e));
            return f && c(d, f.prototype),
            d
        }
        ).apply(null, arguments)
    }
    function c(b, a) {
        return (c = Object.setPrototypeOf || function(b, a) {
            return b.__proto__ = a,
            b
        }
        )(b, a)
    }
    function n(b) {
        return function(b) {
            if (Array.isArray(b)) {
                for (var a = 0, f = new Array(b.length); a < b.length; a++)
                    f[a] = b[a];
                return f
            }
        }(b) || function(b) {
            if (Symbol.iterator in Object(b) || "[object Arguments]" === Object.prototype.toString.call(b))
                return Array.from(b)
        }(b) || function() {
            throw new TypeError("Invalid attempt to spread non-iterable instance")
        }()
    }
    for (var i = [], r = 0, t = [], o = 0, l = function(b, a) {
        var f = b[a++]
          , e = b[a]
          , d = parseInt("" + f + e, 16);
        if (d >> 7 == 0)
            return [1, d];
        if (d >> 6 == 2) {
            var c = parseInt("" + b[++a] + b[++a], 16);
            return d &= 63,
            [2, c = (d <<= 8) + c]
        }
        if (d >> 6 == 3) {
            var n = parseInt("" + b[++a] + b[++a], 16)
              , i = parseInt("" + b[++a] + b[++a], 16);
            return d &= 63,
            [3, i = (d <<= 16) + (n <<= 8) + i]
        }
    }, u = function(b, a) {
        var f = parseInt("" + b[a] + b[a + 1], 16);
        return f = f > 127 ? -256 + f : f
    }, s = function(b, a) {
        var f = parseInt("" + b[a] + b[a + 1] + b[a + 2] + b[a + 3], 16);
        return f = f > 32767 ? -65536 + f : f
    }, p = function(b, a) {
        var f = parseInt("" + b[a] + b[a + 1] + b[a + 2] + b[a + 3] + b[a + 4] + b[a + 5] + b[a + 6] + b[a + 7], 16);
        return f = f > 2147483647 ? 0 + f : f
    }, y = function(b, a) {
        return parseInt("" + b[a] + b[a + 1], 16)
    }, v = function(b, a) {
        return parseInt("" + b[a] + b[a + 1] + b[a + 2] + b[a + 3], 16)
    }, g = g || this || window, h = Object.keys || function(b) {
        var a = {}
          , f = 0;
        for (var e in b)
            a[f++] = e;
        return a.length = f,
        a
    }
    , m = (b.length,
    0), I = "", C = m; C < m + 16; C++) {
        var q = "" + b[C++] + b[C];
        q = parseInt(q, 16),
        I += String.fromCharCode(q)
    }
    if ("HNOJ@?RC" != I)
        throw new Error("error magic number " + I);
    m += 16;
    parseInt("" + b[m] + b[m + 1], 16);
    m += 8,
    r = 0;
    for (var w = 0; w < 4; w++) {
        var S = m + 2 * w
          , R = "" + b[S++] + b[S]
          , x = parseInt(R, 16);
        r += (3 & x) << 2 * w
    }
    m += 16,
    m += 8;
    var z = parseInt("" + b[m] + b[m + 1] + b[m + 2] + b[m + 3] + b[m + 4] + b[m + 5] + b[m + 6] + b[m + 7], 16)
      , O = z
      , E = m += 8
      , j = v(b, m += z);
    j[1];
    m += 4,
    i = {
        p: [],
        q: []
    };
    for (var A = 0; A < j; A++) {
        for (var D = l(b, m), T = m += 2 * D[0], $ = i.p.length, P = 0; P < D[1]; P++) {
            var U = l(b, T);
            i.p.push(U[1]),
            T += 2 * U[0]
        }
        m = T,
        i.q.push([$, i.p.length])
    }
    var _ = {
        5: 1,
        6: 1,
        70: 1,
        22: 1,
        23: 1,
        37: 1,
        73: 1
    }
      , k = {
        72: 1
    }
      , M = {
        74: 1
    }
      , H = {
        11: 1,
        12: 1,
        24: 1,
        26: 1,
        27: 1,
        31: 1
    }
      , J = {
        10: 1
    }
      , N = {
        2: 1,
        29: 1,
        30: 1,
        20: 1
    }
      , B = []
      , W = [];
    function F(b, a, f) {
        for (var e = a; e < a + f; ) {
            var d = y(b, e);
            B[e] = d,
            e += 2;
            k[d] ? (W[e] = u(b, e),
            e += 2) : _[d] ? (W[e] = s(b, e),
            e += 4) : M[d] ? (W[e] = p(b, e),
            e += 8) : H[d] ? (W[e] = y(b, e),
            e += 2) : J[d] ? (W[e] = v(b, e),
            e += 4) : N[d] && (W[e] = v(b, e),
            e += 4)
        }
    }
    return K(b, E, O / 2, [], a, f);
    function G(b, a, f, e, c, l, m, I) {
        null == l && (l = this);
        var C, q, w, S = [], R = 0;
        m && (C = m);
        var x, z, O = a, E = O + 2 * f;
        if (!I)
            for (; O < E; ) {
                var j = parseInt("" + b[O] + b[O + 1], 16);
                O += 2;
                var A = 3 & (x = 13 * j % 241);
                if (x >>= 2,
                A > 2) {
                    A = 3 & x;
                    if (x >>= 2,
                    A > 2)
                        (A = x) < 2 ? (C = S[R--],
                        S[R] = S[R] < C) : A < 9 ? (z = y(b, O),
                        O += 2,
                        S[R] = S[R][z]) : A < 11 ? S[++R] = !0 : A < 13 ? (C = S[R--],
                        S[R] = S[R] >>> C) : A < 15 && (S[++R] = p(b, O),
                        O += 8);
                    else if (A > 1) {
                        (A = x) < 6 || (A < 8 ? C = S[R--] : A < 10 ? (C = S[R--],
                        S[R] = S[R] ^ C) : A < 12 && (z = s(b, O),
                        t[++o] = [[O + 4, z - 3], 0, 0],
                        O += 2 * z - 2))
                    } else if (A > 0) {
                        if ((A = x) > 7)
                            C = S[R--],
                            S[R] = S[R]in C;
                        else if (A > 5)
                            S[R] = ++S[R];
                        else if (A > 3)
                            z = y(b, O),
                            O += 2,
                            C = c[z],
                            S[++R] = C;
                        else if (A > 1) {
                            var D = 0
                              , T = S[R].length
                              , $ = S[R];
                            S[++R] = function() {
                                var b = D < T;
                                if (b) {
                                    var a = $[D++];
                                    S[++R] = a
                                }
                                S[++R] = b
                            }
                        }
                    } else {
                        if ((A = x) < 2) {
                            for (z = v(b, O),
                            A = "",
                            P = i.q[z][0]; P < i.q[z][1]; P++)
                                A += String.fromCharCode(r ^ i.p[P]);
                            A = +A,
                            O += 4,
                            S[++R] = A
                        } else
                            A < 4 ? (C = S[R--],
                            S[R] = S[R] - C) : A < 6 ? (C = S[R--],
                            S[R] = S[R] === C) : A < 15 && (C = S[R],
                            S[R] = S[R - 1],
                            S[R - 1] = C)
                    }
                } else if (A > 1) {
                    A = 3 & x;
                    if (x >>= 2,
                    A > 2)
                        (A = x) > 7 ? (C = S[R--],
                        S[R] = S[R] | C) : A > 5 ? (z = y(b, O),
                        O += 2,
                        S[++R] = c["$" + z]) : A > 3 && (z = s(b, O),
                        t[o][0] && !t[o][2] ? t[o][1] = [O + 4, z - 3] : t[o++] = [0, [O + 4, z - 3], 0],
                        O += 2 * z - 2);
                    else if (A > 1) {
                        if ((A = x) > 13)
                            S[++R] = !1;
                        else if (A > 6)
                            C = S[R--],
                            S[R] = S[R]instanceof C;
                        else if (A > 4)
                            C = S[R--],
                            S[R] = S[R] % C;
                        else if (A > 2)
                            if (S[R--])
                                O += 4;
                            else {
                                if ((z = s(b, O)) < 0) {
                                    I = 1,
                                    F(b, a, 2 * f),
                                    O += 2 * z - 2;
                                    break
                                }
                                O += 2 * z - 2
                            }
                        else if (A > 0) {
                            for (z = v(b, O),
                            C = "",
                            P = i.q[z][0]; P < i.q[z][1]; P++)
                                C += String.fromCharCode(r ^ i.p[P]);
                            S[++R] = C,
                            O += 4
                        }
                    } else if (A > 0) {
                        (A = x) < 1 ? S[++R] = g : A < 3 ? (C = S[R--],
                        S[R] = S[R] + C) : A < 5 ? (C = S[R--],
                        S[R] = S[R] == C) : A < 14 && (C = S[R - 1],
                        q = S[R],
                        S[++R] = C,
                        S[++R] = q)
                    } else {
                        (A = x) < 2 ? (C = S[R--],
                        S[R] = S[R] > C) : A < 9 ? (z = v(b, O),
                        O += 4,
                        q = R + 1,
                        S[R -= z - 1] = z ? S.slice(R, q) : []) : A < 11 ? (z = y(b, O),
                        O += 2,
                        C = S[R--],
                        c[z] = C) : A < 13 ? (C = S[R--],
                        S[R] = S[R] >> C) : A < 15 && (S[++R] = s(b, O),
                        O += 4)
                    }
                } else if (A > 0) {
                    A = 3 & x;
                    if (x >>= 2,
                    A > 2)
                        if ((A = x) < 1)
                            S[R] = !S[R];
                        else if (A < 3) {
                            if ((z = s(b, O)) < 0) {
                                I = 1,
                                F(b, a, 2 * f),
                                O += 2 * z - 2;
                                break
                            }
                            O += 2 * z - 2
                        } else
                            A < 5 ? (C = S[R--],
                            S[R] = S[R] / C) : A < 7 ? (C = S[R--],
                            S[R] = S[R] !== C) : A < 14 && (S[++R] = l);
                    else if (A > 1) {
                        (A = x) < 2 ? S[++R] = C : A < 4 ? (C = S[R--],
                        S[R] = S[R] <= C) : A < 11 ? (C = S[R -= 2][S[R + 1]] = S[R + 2],
                        R--) : A < 13 && (C = S[R],
                        S[++R] = C)
                    } else if (A > 0) {
                        if ((A = x) < 8)
                            q = S[R--],
                            C = delete S[R--][q];
                        else if (A < 10) {
                            for (z = v(b, O),
                            A = "",
                            P = i.q[z][0]; P < i.q[z][1]; P++)
                                A += String.fromCharCode(r ^ i.p[P]);
                            O += 4,
                            S[R] = S[R][A]
                        } else
                            A < 12 ? (C = S[R--],
                            S[R] = S[R] << C) : A < 14 && (S[++R] = u(b, O),
                            O += 2)
                    } else {
                        if ((A = x) < 5) {
                            z = s(b, O);
                            try {
                                if (t[o][2] = 1,
                                1 == (C = G(b, O + 4, z - 3, [], c, l, null, 0))[0])
                                    return C
                            } catch (m) {
                                if (t[o] && t[o][1] && 1 == (C = G(b, t[o][1][0], t[o][1][1], [], c, l, m, 0))[0])
                                    return C
                            } finally {
                                if (t[o] && t[o][0] && 1 == (C = G(b, t[o][0][0], t[o][0][1], [], c, l, null, 0))[0])
                                    return C;
                                t[o] = 0,
                                o--
                            }
                            O += 2 * z - 2
                        } else
                            A < 7 ? (z = y(b, O),
                            O += 2,
                            S[R -= z] = 0 === z ? new S[R] : d(S[R], n(S.slice(R + 1, R + z + 1)))) : A < 9 && (C = S[R--],
                            S[R] = S[R] & C)
                    }
                } else {
                    A = 3 & x;
                    if (x >>= 2,
                    A < 1) {
                        if ((A = x) < 1)
                            return [1, S[R--]];
                        if (A < 5)
                            C = S[R--],
                            S[R] = S[R] * C;
                        else if (A < 7)
                            C = S[R--],
                            S[R] = S[R] != C;
                        else if (A < 14)
                            q = S[R--],
                            w = S[R--],
                            (A = S[R--]).x === G ? A.y >= 1 ? S[++R] = K(b, A.c, A.l, q, A.z, w, null, 1) : (S[++R] = K(b, A.c, A.l, q, A.z, w, null, 0),
                            A.y++) : S[++R] = A.apply(w, q);
                        else if (A < 16) {
                            z = s(b, O),
                            (U = function a() {
                                var f = arguments;
                                return a.y > 0 ? K(b, a.c, a.l, f, a.z, this, null, 0) : (a.y++,
                                K(b, a.c, a.l, f, a.z, this, null, 0))
                            }
                            ).c = O + 4,
                            U.l = z - 2,
                            U.x = G,
                            U.y = 0,
                            U.z = c,
                            S[R] = U,
                            O += 2 * z - 2
                        }
                    } else if (A < 2) {
                        (A = x) < 4 ? (q = S[R--],
                        (A = S[R]).x === G ? A.y >= 1 ? S[R] = K(b, A.c, A.l, [q], A.z, w, null, 1) : (S[R] = K(b, A.c, A.l, [q], A.z, w, null, 0),
                        A.y++) : S[R] = A(q)) : A < 6 ? S[R -= 1] = S[R][S[R + 1]] : A < 8 ? S[R] = --S[R] : A < 10 && (C = S[R--],
                        S[R] = typeof C)
                    } else if (A < 3) {
                        if ((A = x) < 7)
                            S[R] = h(S[R]);
                        else if (A < 9) {
                            for (C = S[R--],
                            z = v(b, O),
                            A = "",
                            P = i.q[z][0]; P < i.q[z][1]; P++)
                                A += String.fromCharCode(r ^ i.p[P]);
                            O += 4,
                            S[R--][A] = C
                        } else if (A < 13)
                            throw S[R--]
                    } else {
                        (A = x) < 1 ? S[++R] = null : A < 3 ? (C = S[R--],
                        S[R] = S[R] >= C) : A < 12 && (S[++R] = void 0)
                    }
                }
            }
        if (I)
            for (; O < E; ) {
                j = B[O];
                O += 2;
                A = 3 & (x = 13 * j % 241);
                if (x >>= 2,
                A > 2) {
                    A = 3 & x;
                    if (x >>= 2,
                    A < 1) {
                        if ((A = x) > 13)
                            C = S[R],
                            S[R] = S[R - 1],
                            S[R - 1] = C;
                        else if (A > 4)
                            C = S[R--],
                            S[R] = S[R] === C;
                        else if (A > 2)
                            C = S[R--],
                            S[R] = S[R] - C;
                        else if (A > 0) {
                            for (z = W[O],
                            A = "",
                            P = i.q[z][0]; P < i.q[z][1]; P++)
                                A += String.fromCharCode(r ^ i.p[P]);
                            A = +A,
                            O += 4,
                            S[++R] = A
                        }
                    } else if (A < 2) {
                        if ((A = x) > 7)
                            C = S[R--],
                            S[R] = S[R]in C;
                        else if (A > 5)
                            S[R] = ++S[R];
                        else if (A > 3)
                            z = W[O],
                            O += 2,
                            C = c[z],
                            S[++R] = C;
                        else if (A > 1) {
                            D = 0,
                            T = S[R].length,
                            $ = S[R];
                            S[++R] = function() {
                                var b = D < T;
                                if (b) {
                                    var a = $[D++];
                                    S[++R] = a
                                }
                                S[++R] = b
                            }
                        }
                    } else if (A < 3) {
                        (A = x) > 10 ? (z = W[O],
                        t[++o] = [[O + 4, z - 3], 0, 0],
                        O += 2 * z - 2) : A > 8 ? (C = S[R--],
                        S[R] = S[R] ^ C) : A > 6 && (C = S[R--])
                    } else {
                        (A = x) < 2 ? (C = S[R--],
                        S[R] = S[R] < C) : A < 9 ? (z = W[O],
                        O += 2,
                        S[R] = S[R][z]) : A < 11 ? S[++R] = !0 : A < 13 ? (C = S[R--],
                        S[R] = S[R] >>> C) : A < 15 && (S[++R] = W[O],
                        O += 8)
                    }
                } else if (A > 1) {
                    A = 3 & x;
                    if (x >>= 2,
                    A > 2)
                        (A = x) < 5 ? (z = W[O],
                        t[o][0] && !t[o][2] ? t[o][1] = [O + 4, z - 3] : t[o++] = [0, [O + 4, z - 3], 0],
                        O += 2 * z - 2) : A < 7 ? (z = W[O],
                        O += 2,
                        S[++R] = c["$" + z]) : A < 9 && (C = S[R--],
                        S[R] = S[R] | C);
                    else if (A > 1) {
                        if ((A = x) > 13)
                            S[++R] = !1;
                        else if (A > 6)
                            C = S[R--],
                            S[R] = S[R]instanceof C;
                        else if (A > 4)
                            C = S[R--],
                            S[R] = S[R] % C;
                        else if (A > 2)
                            S[R--] ? O += 4 : O += 2 * (z = W[O]) - 2;
                        else if (A > 0) {
                            for (z = W[O],
                            C = "",
                            P = i.q[z][0]; P < i.q[z][1]; P++)
                                C += String.fromCharCode(r ^ i.p[P]);
                            S[++R] = C,
                            O += 4
                        }
                    } else if (A > 0) {
                        (A = x) < 1 ? S[++R] = g : A < 3 ? (C = S[R--],
                        S[R] = S[R] + C) : A < 5 ? (C = S[R--],
                        S[R] = S[R] == C) : A < 14 && (C = S[R - 1],
                        q = S[R],
                        S[++R] = C,
                        S[++R] = q)
                    } else {
                        (A = x) > 13 ? (S[++R] = W[O],
                        O += 4) : A > 11 ? (C = S[R--],
                        S[R] = S[R] >> C) : A > 9 ? (z = W[O],
                        O += 2,
                        C = S[R--],
                        c[z] = C) : A > 7 ? (z = W[O],
                        O += 4,
                        q = R + 1,
                        S[R -= z - 1] = z ? S.slice(R, q) : []) : A > 0 && (C = S[R--],
                        S[R] = S[R] > C)
                    }
                } else if (A > 0) {
                    A = 3 & x;
                    if (x >>= 2,
                    A < 1)
                        if ((A = x) < 5) {
                            z = W[O];
                            try {
                                if (t[o][2] = 1,
                                1 == (C = G(b, O + 4, z - 3, [], c, l, null, 0))[0])
                                    return C
                            } catch (m) {
                                if (t[o] && t[o][1] && 1 == (C = G(b, t[o][1][0], t[o][1][1], [], c, l, m, 0))[0])
                                    return C
                            } finally {
                                if (t[o] && t[o][0] && 1 == (C = G(b, t[o][0][0], t[o][0][1], [], c, l, null, 0))[0])
                                    return C;
                                t[o] = 0,
                                o--
                            }
                            O += 2 * z - 2
                        } else
                            A < 7 ? (z = W[O],
                            O += 2,
                            S[R -= z] = 0 === z ? new S[R] : d(S[R], n(S.slice(R + 1, R + z + 1)))) : A < 9 && (C = S[R--],
                            S[R] = S[R] & C);
                    else if (A < 2) {
                        if ((A = x) > 12)
                            S[++R] = W[O],
                            O += 2;
                        else if (A > 10)
                            C = S[R--],
                            S[R] = S[R] << C;
                        else if (A > 8) {
                            for (z = W[O],
                            A = "",
                            P = i.q[z][0]; P < i.q[z][1]; P++)
                                A += String.fromCharCode(r ^ i.p[P]);
                            O += 4,
                            S[R] = S[R][A]
                        } else
                            A > 6 && (q = S[R--],
                            C = delete S[R--][q])
                    } else if (A < 3) {
                        (A = x) < 2 ? S[++R] = C : A < 4 ? (C = S[R--],
                        S[R] = S[R] <= C) : A < 11 ? (C = S[R -= 2][S[R + 1]] = S[R + 2],
                        R--) : A < 13 && (C = S[R],
                        S[++R] = C)
                    } else {
                        (A = x) > 12 ? S[++R] = l : A > 5 ? (C = S[R--],
                        S[R] = S[R] !== C) : A > 3 ? (C = S[R--],
                        S[R] = S[R] / C) : A > 1 ? O += 2 * (z = W[O]) - 2 : A > -1 && (S[R] = !S[R])
                    }
                } else {
                    A = 3 & x;
                    if (x >>= 2,
                    A > 2)
                        (A = x) < 1 ? S[++R] = null : A < 3 ? (C = S[R--],
                        S[R] = S[R] >= C) : A < 12 && (S[++R] = void 0);
                    else if (A > 1) {
                        if ((A = x) < 7)
                            S[R] = h(S[R]);
                        else if (A < 9) {
                            for (C = S[R--],
                            z = W[O],
                            A = "",
                            P = i.q[z][0]; P < i.q[z][1]; P++)
                                A += String.fromCharCode(r ^ i.p[P]);
                            O += 4,
                            S[R--][A] = C
                        } else if (A < 13)
                            throw S[R--]
                    } else if (A > 0) {
                        (A = x) > 8 ? (C = S[R--],
                        S[R] = typeof C) : A > 6 ? S[R] = --S[R] : A > 4 ? S[R -= 1] = S[R][S[R + 1]] : A > 2 && (q = S[R--],
                        (A = S[R]).x === G ? A.y >= 1 ? S[R] = K(b, A.c, A.l, [q], A.z, w, null, 1) : (S[R] = K(b, A.c, A.l, [q], A.z, w, null, 0),
                        A.y++) : S[R] = A(q))
                    } else {
                        var U;
                        if ((A = x) > 14)
                            z = W[O],
                            (U = function a() {
                                var f = arguments;
                                return a.y > 0 ? K(b, a.c, a.l, f, a.z, this, null, 0) : (a.y++,
                                K(b, a.c, a.l, f, a.z, this, null, 0))
                            }
                            ).c = O + 4,
                            U.l = z - 2,
                            U.x = G,
                            U.y = 0,
                            U.z = c,
                            S[R] = U,
                            O += 2 * z - 2;
                        else if (A > 12)
                            q = S[R--],
                            w = S[R--],
                            (A = S[R--]).x === G ? A.y >= 1 ? S[++R] = K(b, A.c, A.l, q, A.z, w, null, 1) : (S[++R] = K(b, A.c, A.l, q, A.z, w, null, 0),
                            A.y++) : S[++R] = A.apply(w, q);
                        else if (A > 5)
                            C = S[R--],
                            S[R] = S[R] != C;
                        else if (A > 3)
                            C = S[R--],
                            S[R] = S[R] * C;
                        else if (A > -1)
                            return [1, S[R--]]
                    }
                }
            }
        return [0, null]
    }
    function K(b, a, f, e, d, c, n, i) {
        var r, t;
        null == c && (c = this),
        d && !d.d && (d.d = 0,
        d.$0 = d,
        d[1] = {});
        var o = {}
          , l = o.d = d ? d.d + 1 : 0;
        for (o["$" + l] = o,
        t = 0; t < l; t++)
            o[r = "$" + t] = d[r];
        for (t = 0,
        l = o.length = e.length; t < l; t++)
            o[t] = e[t];
        return i && !B[a] && F(b, a, 2 * f),
        B[a] ? G(b, a, f, 0, o, c, null, 1)[1] : G(b, a, f, 0, o, c, null, 0)[1]
    }
};

(glb = "undefined" == typeof window ? global : window)._$jsvmprt("", [, , "undefined" != typeof exports ? exports : void 0, "undefined" != typeof module ? module : void 0, "undefined" != typeof define ? define : void 0, "undefined" != typeof Object ? Object : void 0, void 0, "undefined" != typeof TypeError ? TypeError : void 0, "undefined" != typeof document ? document : void 0, "undefined" != typeof InstallTrigger ? InstallTrigger : void 0, "undefined" != typeof safari ? safari : void 0, "undefined" != typeof Date ? Date : void 0, "undefined" != typeof Math ? Math : void 0, "undefined" != typeof navigator ? navigator : void 0, "undefined" != typeof location ? location : void 0, "undefined" != typeof history ? history : void 0, "undefined" != typeof Image ? Image : void 0, "undefined" != typeof console ? console : void 0, "undefined" != typeof PluginArray ? PluginArray : void 0, "undefined" != typeof indexedDB ? indexedDB : void 0, "undefined" != typeof DOMException ? DOMException : void 0, "undefined" != typeof parseInt ? parseInt : void 0, "undefined" != typeof String ? String : void 0, "undefined" != typeof Array ? Array : void 0, "undefined" != typeof Error ? Error : void 0, "undefined" != typeof JSON ? JSON : void 0, "undefined" != typeof Promise ? Promise : void 0, "undefined" != typeof WebSocket ? WebSocket : void 0, "undefined" != typeof eval ? eval : void 0, "undefined" != typeof setTimeout ? setTimeout : void 0, "undefined" != typeof encodeURIComponent ? encodeURIComponent : void 0, "undefined" != typeof encodeURI ? encodeURI : void 0, "undefined" != typeof Request ? Request : void 0, "undefined" != typeof Headers ? Headers : void 0, "undefined" != typeof decodeURIComponent ? decodeURIComponent : void 0, "undefined" != typeof RegExp ? RegExp : void 0]);


window.byted_acrawler && window.byted_acrawler.init({
                aid: 24,
                dfp: !0
            });